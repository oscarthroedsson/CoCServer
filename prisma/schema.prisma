// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------- üë• PROFILE TABLES --------------------------------------------------
model User {
  id                       Int                               @id @default(autoincrement()) @db.UnsignedInt
  gameTag                  String                            @unique
  gameName                 String
  clanTag                  String? // clanTag can be either a String or null
  totalDonations           Int?                              @default(0) // totalDonations can be either an Int or null
  totalDonationsReceived   Int?                              @default(0) // totalDonationsReceived can be either an Int or null
  donationRatio            Int?                              @default(0) // donationRatio can be either an Int or null
  email                    String?                           @unique
  createdAt                DateTime                          @default(now())
  updatedAt                DateTime                          @updatedAt
  acceptTerms              Boolean                           @default(false)
  TrophyHistory            TrophyHistory[]
  DonationHistory          DonationHistory[]
  ClanCapitalContributions ClanCapitalContributionsHistory[]
  ClanWarLeagueAttacks     ClanWarLeagueAttack[]             @relation("attacker")
  ClanWarLeagueDefenses    ClanWarLeagueAttack[]             @relation("defender")
  ClanWarAttack            ClanWarAttack[]                   @relation("attacker")
  ClanWarDefenses          ClanWarAttack[]                   @relation("defender")
}

model Clan {
  id                        Int                         @id @default(autoincrement()) @db.UnsignedInt
  clanTag                   String                      @unique
  clanName                  String                      @unique
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  ClanMembers               LatestClanMembers?
  JoinedAndLeaveClanHistory JoinedAndLeaveClanHistory[]
  ClanWarLeagueGroupClan    ClanWarLeagueGroupClan[]
  matchesAsClanOne          ClanWarLeagueMatch[]        @relation("clanOne")
  matchesAsClanTwo          ClanWarLeagueMatch[]        @relation("clanTwo")
  clanWarAsClanOne          ClanWarMatch[]              @relation("clanOne")
  clanWarAsClanTwo          ClanWarMatch[]              @relation("clanTwo")
  capitalRaids              CapitalRaids[]
}

// ---------------------------------------- üìú COLLECT HISTORY TABLES --------------------------------------------------
model LatestClanMembers {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  clan      Clan     @relation(fields: [clanTag], references: [clanTag])
  clanTag   String   @unique
  members   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JoinedAndLeaveClanHistory {
  id      Int    @id @default(autoincrement()) @db.UnsignedInt
  clan    Clan   @relation(fields: [clanTag], references: [clanTag])
  clanTag String @unique
  data    Json
}

model TrophyHistory {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  user      User     @relation(fields: [gameTag], references: [gameTag])
  gameTag   String
  trophies  Int
  createdAt DateTime @default(now())
}

model DonationHistory {
  id                Int      @id @default(autoincrement()) @db.UnsignedInt
  user              User     @relation(fields: [gameTag], references: [gameTag])
  gameTag           String
  gameName          String
  donations         Int
  donationsReceived Int
  donationRatio     Float
  donerType         String
  createdAt         DateTime @default(now())
}

model ClanCapitalContributionsHistory {
  id                   Int      @id @default(autoincrement()) @db.UnsignedInt
  user                 User     @relation(fields: [gameTag], references: [gameTag])
  gameTag              String
  clanTag              String
  capitalContributions Int?
  totalContributions   Int
  createdAt            DateTime @default(now())
}

// ---------------------------------------- ü™ñ‚öîÔ∏è CLAN WAR LEAGUE TABLES --------------------------------------------------
model ClanWarLeagueGroup {
  id          Int                      @id @default(autoincrement())
  seasonYear  Int
  seasonMonth Int
  groupClans  ClanWarLeagueGroupClan[]
  matches     ClanWarLeagueMatch[]
}

model ClanWarLeagueGroupClan {
  id      Int                @id @default(autoincrement())
  clanTag String
  group   ClanWarLeagueGroup @relation(fields: [groupId], references: [id])
  groupId Int
  clan    Clan               @relation(fields: [clanTag], references: [clanTag])

  @@unique([clanTag, groupId])
}

model ClanWarLeagueMatch {
  id           Int                   @id @default(autoincrement())
  round        Int
  clanOneTag   String
  clanTwoTag   String
  clanOneStats Json
  clanTwoStats Json
  groupId      Int
  winner       String
  clanOne      Clan                  @relation("clanOne", fields: [clanOneTag], references: [clanTag])
  clanTwo      Clan                  @relation("clanTwo", fields: [clanTwoTag], references: [clanTag])
  group        ClanWarLeagueGroup    @relation(fields: [groupId], references: [id])
  attacks      ClanWarLeagueAttack[]
}

model ClanWarLeagueAttack {
  id                    Int                @id @default(autoincrement())
  attackerPlayerTag     String
  defenderPlayerTag     String?
  stars                 Int
  destructionPercentage Float
  duration              Int
  matchId               Int
  gotAttacked           Boolean
  attacker              User               @relation("attacker", fields: [attackerPlayerTag], references: [gameTag])
  defender              User?              @relation("defender", fields: [defenderPlayerTag], references: [gameTag])
  match                 ClanWarLeagueMatch @relation(fields: [matchId], references: [id])
}

// ---------------------------------------- ü™ñ CLAN WAR TABLES --------------------------------------------------

model ClanWarMatch {
  id            Int             @id @default(autoincrement())
  seasonYear    Int
  seasonMonth   Int
  clanOneTag    String
  clanTwoTag    String
  clanOneStats  Json
  clanTwoStats  Json
  teamSize      Int
  winner        String
  clanOne       Clan            @relation("clanOne", fields: [clanOneTag], references: [clanTag])
  clanTwo       Clan            @relation("clanTwo", fields: [clanTwoTag], references: [clanTag])
  ClanWarAttack ClanWarAttack[]
}

model ClanWarAttack {
  id                    Int          @id @default(autoincrement())
  matchId               Int
  attackerPlayerTag     String
  defenderPlayerTag     String?
  stars                 Int
  destructionPercentage Float
  duration              Int
  attacks               Int
  gotAttacked           Boolean
  attacker              User         @relation("attacker", fields: [attackerPlayerTag], references: [gameTag])
  defender              User?        @relation("defender", fields: [defenderPlayerTag], references: [gameTag])
  match                 ClanWarMatch @relation(fields: [matchId], references: [id])
}

// ---------------------------------------- üèîÔ∏è CLAN CAPITAL TABLES --------------------------------------------------

// is a row for every season(month)
//? l√§gga till raidsCompleted h√§r? 
model CapitalRaids {
  id       Int    @id @default(autoincrement())
  clanTag  String
  clanName String
  clan     Clan   @relation(fields: [clanTag], references: [clanTag])

  seasonYear  Int
  seasonMonth Int

  capitalTotalLoot        Int
  raidsCompleted          Int
  totalAttacks            Int
  enemyDistrictsDestroyed Int
  offensiveReward         Int
  defensiveReward         Int
  totalRaids              Int

  raids CapitalRaid[] // Relation till array av CapitalRaid

  @@unique([clanTag, seasonYear, seasonMonth])
  @@map("CapitalRaids")
}

// Is a row for every week of the season (Fre - Mon)
model CapitalRaid {
  id             Int @id @default(autoincrement())
  capitalRaidsId Int
  raid           Int

  clanTag  String
  clanName String
  defender String

  attacksMade             Int
  numOfDistricts          Int
  enemyDistrictsDestroyed Int

  districts    CapitalDistricts[] // Relat array av DistrictsAttacksDistrictsAttacks
  capitalRaids CapitalRaids       @relation(fields: [capitalRaidsId], references: [id])

  @@map("CapitalRaid")
}

model CapitalDistricts {
  id                 Int    @id @default(autoincrement())
  capitalRaidId      Int
  district           String
  destructionPercent Float
  attackCount        Int
  totalLooted        Int?

  attacks     CapitalDistrictAttacks[]
  capitalRaid CapitalRaid              @relation(fields: [capitalRaidId], references: [id])

  @@map("CapitalDistricts")
}

model CapitalDistrictAttacks {
  id                 Int @id @default(autoincrement())
  capitalDistrictsId Int
  attack             Int

  playerName   String
  playerTag    String
  districtName String
  destruction  Int
  starsReached Int

  seasonYear  Int
  seasonMonth Int

  district CapitalDistricts @relation(fields: [capitalDistrictsId], references: [id])

  @@unique([capitalDistrictsId, playerTag, districtName, attack, seasonYear, seasonMonth])
  @@map("CapitalDistrictAttacks")
}
